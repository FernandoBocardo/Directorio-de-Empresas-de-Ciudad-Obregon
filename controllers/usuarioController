const fs = require('fs');
const Usuario = require('../models/usuarioModel');
const UsuarioDAO = require('../dataAccess/usuarioDAO');
const dataPath = './data/usuario.json';
const Joi = require('joi');
const bcrypt = require('bcrypt');

const schemaUsuario = Joi.object({
  id:Joi.number().integer().min(1).required(),
  nombre: Joi.string().min(3).required(),
  correo: Joi.string().email().required(),
  password: Joi.string().min(4).required(),
});

const schemaUsuarioRegistrar = Joi.object({
  nombre: Joi.string().min(3).required(),
  correo: Joi.string().email().required(),
  password: Joi.string().min(4).required(),
});

const secretKey = process.env.SECRET_KEY;

// Funciones del controlador
exports.getAllUsuarios = async (req, res) => {
  try {
    await UsuarioDAO.consultarUsuarios((result, err) => {
        if (err) {
            console.error('error al consultar la base de datos' + err);
        } else {
            //console.log(result);
            res.status(200).json(result);
        }
    })
    
  } catch (err) {
    res.status(500).json({ error: 'No se pudieron obtener los usuarios' });
  }
};

exports.getUsuarioById = async (req, res) => {
  const usuarioId = req.params.id;

  try {
    await UsuarioDAO.consultarUsuarioId(usuarioId, (result, err) => {
      if (err) {
          console.error('Error al consultar la base de datos' + err);
      } else {
          //console.log(result);
          if (result.length === 0) {
            return res.status(404).json({ error: 'Usuario no encontrado.' });
          }
          res.status(200).json(result);
      }
    })  
  } catch (err) {
      res.status(500).json({ error: 'No se pudo obtener la usuario.' });
  }
};

exports.addUsuario = async (req, res) => {
  const { error, value } = schemaUsuarioRegistrar.validate(req.body);

  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }

  try {
      const hashedPassword = await bcrypt.hash(req.body.password, 10);
      console.log(hashedPassword);
      const datosNuevoUsuario = new Usuario(req.body.id, req.body.nombre, req.body.correo, hashedPassword);

      await UsuarioDAO.insertarUsuario(datosNuevoUsuario, (result, err) => {
        if (err) {
            console.error('Error al insertar en la base de datos' + err);
        } else {
            console.log(result);
            res.status(200).json({ message: 'Usuario agregado exitosamente.' });
        }
      })  
  } catch (err) {
      res.status(500).json({ error: 'No se pudo agregar el usuario' });
  }
};

exports.updateUsuario = async (req, res) => {
  const { error, value } = schemaUsuario.validate(req.body);

  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }

  try {
    const datosUsuarioActualizar = new Usuario(req.params.id, req.body.nombre, req.body.correo, req.body.password);

    await UsuarioDAO.actualizarUsuario(datosUsuarioActualizar, (result, err) => {
      if (err) {
          console.error('Error al actualizar en la base de datos' + err);
      } else {
          console.log(result);
          if(result.affectedRows === 0)
          {
            res.status(404).json({ message: 'No existe un usuario con esa ID' });
          }
          else
          {
            res.status(200).json({ message: 'Usuario actualizado exitosamente.' });
          }
      }
    })  
  } catch (err) {
      res.status(500).json({ error: 'No se pudo actualizar el usuario' });
  }
};

exports.deleteUsuario = async (req, res) => {
  const usuarioEliminarId = req.params.id;

  try {
    await UsuarioDAO.eliminarUsuario(usuarioEliminarId, (result, err) => {
      if (err) {
          console.error('Error al eliminar el usuario en la base de datos' + err);
      } else {
          console.log(result);
          if(result.affectedRows === 0)
          {
            res.status(404).json({ message: 'No existe un usuario con esa ID' });
          }
          else
          {
            res.status(200).json({ message: 'Usuario eliminado exitosamente.' });
          }
      }
    })  
  } catch (err) {
      res.status(500).json({ error: 'No se pudo eliminar el usuario' });
  }
};

